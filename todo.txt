
change how we handle struct members. we probably want a var_decl node which contains type and name.

prevent duplicate arguments

do we want to turn a *= b into a = a * (b) ???
	seems like less type checking and code gen

make a separate pass to turn every compile-time-known expression into the actual value rather than the full expression???

do the scope thing. the annoying thing is looping through it and finding stuff. can we make a helper?

int foo := 5;
or
const int foo = 5;
for constants?

the name resolving for consts should happen in right when we typecheck, so we collapse stuff into an int and we dont have to do nonsense again

typecheck struct members if  we are not doing it already

if we already have a fatal error, do not overwrite the error string

stop doing the fucking static buffer bullshit.

have types enum?

do we want to add a count member to enums in type checking?? it would prevent some if checks

maybe dont generate enums in c code?

generate -> instead of . when using pointers

redo for loop nonsense. try to not add things to the AST. make code gen smarter

error if external func is operator overload

separate the idea of a mutable variable and a constant expression???

we need a better system for types...

this shouldnt be allowed! editor.tiles is an s8!!
int[c_max_tiles][c_max_tiles] tiles = editor.tiles;

#include or equivalent

add a test that prevents us from doing: const int foo; (no value!!)