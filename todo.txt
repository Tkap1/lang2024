
add a way to iterate by ptr

why do we have node_to_c_str? couldn't we do generate_expression?

get rid of dont_generate?

maybe get rid of external_func? we know if it's external because it doesn't have a body? unless we can have functions without a body for whatever reason
	in the future

maybe instead of adding a node for the iterator variable in for loops, we just know that we are in a for loop when looking for variables from
	an identifier and then we just check if the name matches the iterator name?? idk

change how we handle struct members. we probably want a var_decl node which contains type and name.

prevent duplicate arguments

do we want to turn a *= b into a = a * (b) ???
	seems like less type checking and code gen

make a separate pass to turn every compile-time-known expression into the actual value rather than the full expression???

do the scope thing. the annoying thing is looping through it and finding stuff. can we make a helper?

int foo := 5;
or
const int foo = 5;
for constants?

the name resolving for consts should happen in right when we typecheck, so we collapse stuff into an int and we dont have to do nonsense again

typecheck struct members if  we are not doing it already

if we already have a fatal error, do not overwrite the error string

stop doing the fucking static buffer bullshit.

have types enum?

do we want to add a count member to enums in type checking?? it would prevent some if checks

maybe dont generate enums in c code?

generate -> instead of . when using pointers

redo for loop nonsense. try to not add things to the AST. make code gen smarter

error if external func is operator overload

separate the idea of a mutable variable and a constant expression???

we need a better system for types...

this shouldnt be allowed! editor.tiles is an s8!!
int[c_max_tiles][c_max_tiles] tiles = editor.tiles;

we want something like this
data_enum e_map
{
	struct s_map_data
	{
		char* path,
	}
	m000 {
		.path = "maps/000.map",
	}
	m001 {
		.path = "maps/001.map",
	}
}
usage:
	m000.path
	e_map[e_map.m000].path
	e_map[0].path


we have a bug with nested includes?? the error message contains a variable name instead of a file
	are we checking for null?

we need to generate the data enum table thing, because we could have e_foo[some_variable_not_known_at_compile_time]

if we have a bad type in an external function, we dont get an error in the declaration, but we do get an error when we try to call, it doesnt exist

we need a sizeof immediately

while without an expression is broken, it thinks the {} is a struct literal

bringing a variable into scope with import that collides with a function name does not give an error!

we want to allow: import game.projectiles;

importing a value instead of a struct fails an assert, we want an error!

do we want to handle alignment bullshit with sizeof?

having a return something inside a function that returns void says that the function doesnt' exist

import game.projectiles as p;

Raticide: keep a list of includes, skip if already included.



game:
	handle overlap between spikes/save points??

better var args. C's var args are dog shit

array (non ptr) to func
better errors:
	if we fail to parse a struct, we get an error that the we cant find the struct, rahter than the error inside the struct.
		same for functions
function overloading

shouldnt all e_node_type have a proper basic_type member? it is not the case currently

pretty sure that if we find foo(1) but foo doesnt take any arguments, we will fail an assert/crash instead of reporting an error


see if this works "s_v2 a; return (a * 2).x;

multithread tests!

test a method call with a pointer variable

re-do how we handle scopes? ft. aruseus
	struct s_scope
	{
		s_scope* parent;
		funcs;
		nodes;
		...;
	}