

struct FILETIME
{
	u32 dwLowDateTime;
	u32 dwHighDateTime;
}

const u32 GENERIC_READ = 2147483648;
const int FILE_SHARE_READ = 1;
const int OPEN_EXISTING = 3;
const int FILE_ATTRIBUTE_NORMAL = 128;


external_func s32 CompareFileTime(FILETIME*, FILETIME*);
external_func void* GetProcAddress(void*, char*);
external_func void* LoadLibraryA(char*);
external_func int FreeLibrary(void*);
external_func int FreeLibrary(void*);
external_func int CopyFileA(char*, char*, int);
external_func void Sleep(u32);
external_func int GetFileTime(void*, FILETIME*, FILETIME*, FILETIME*);
external_func void* CreateFileA(char*, u32, u32, void*, u32, u32, void*);
external_func int CloseHandle(void*);

FILETIME dll_write_time;

func void* hot_reload(char* a, char* b, void* curr_dll)
{
	FILETIME time = get_last_write_time(a);
	if CompareFileTime(&dll_write_time, &time) == 0 { return curr_dll; }
	dll_write_time = time;

	if curr_dll {
		FreeLibrary(curr_dll);
	}

	while 1 {
		if CopyFileA(a, b, 0) {
			break;
		}
		Sleep(10);
	}

	void* result = 0;
	while 1 {
		result = LoadLibraryA(b);
		if result { break; }
		Sleep(10);
	}
	return result;

}

func FILETIME get_last_write_time(char* path)
{
	FILETIME result;
	void* file = CreateFileA(path, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
	GetFileTime(file, 0, 0, &result);
	CloseHandle(file);
	return result;
}