

// raylib

struct s_color
{
	u8 r,
	u8 g,
	u8 b,
	u8 a,
}
const int LOG_WARNING = 4;
const int FLAG_VSYNC_HINT = 64;
const s_color BLACK = {0, 0, 0, 0};
const s_color RED = {230, 41, 55, 255};
const s_color GREEN = {0, 228, 48, 255};
const s_color BLUE = {0, 121, 241, 255};
const int MOUSE_BUTTON_LEFT = 0;
const int MOUSE_BUTTON_RIGHT = 1;


struct s_v2
{
	float x,
	float y,
}


external_func void SetTraceLogLevel(s32);
external_func void SetConfigFlags(u32);
external_func void InitWindow(s32, s32, char*);
external_func b32 WindowShouldClose();
external_func void BeginDrawing();
external_func void DrawRectangle(s32, s32, s32, s32, s_color);
external_func void DrawFPS(s32, s32);
external_func void EndDrawing();
external_func void ClearBackground(s_color);
external_func int rand();
external_func s_v2 GetMousePosition();
external_func b32 IsMouseButtonPressed(int);
external_func b32 IsMouseButtonDown(int);

struct s_player
{
	s_v2 pos,
	s_v2 vel,
}

const int c_max_tiles = 64;
const int c_tile_size = 16;
s8[c_max_tiles][c_max_tiles] tiles;


func s_v2 v2(float x, float y)
{
	return {x, y};
}

func int main()
{

	SetTraceLogLevel(4);
	SetConfigFlags(64);
	InitWindow(800, 600, "AZEN");


	s_player player;
	player.pos = v2(32, 32);

	while !WindowShouldClose() {
		BeginDrawing();
		ClearBackground(BLACK);

		s_v2 mouse = GetMousePosition();

		if IsMouseButtonDown(MOUSE_BUTTON_LEFT) {
			int x = mouse.x / c_tile_size;
			int y = mouse.y / c_tile_size;
			tiles[y][x] = 1;
		}

		if IsMouseButtonDown(MOUSE_BUTTON_RIGHT) {
			int x = mouse.x / c_tile_size;
			int y = mouse.y / c_tile_size;
			tiles[y][x] = 2;
		}

		for y: c_max_tiles {
			for x: c_max_tiles {
				s8 tile = tiles[y][x];
				if tile == 1 {
					DrawRectangle(x * c_tile_size, y * c_tile_size, c_tile_size, c_tile_size, RED);
				}
				if tile == 2 {
					DrawRectangle(x * c_tile_size, y * c_tile_size, c_tile_size, c_tile_size, GREEN);
				}
			}
		}

		player.vel.y += 0.1;
		player.pos.y += player.vel.y;
		DrawRectangle(player.pos.x, player.pos.y, c_tile_size, c_tile_size * 2, BLUE);

		DrawFPS(16, 16);

		EndDrawing();
	}
}
